{"mappings":";;;;;;;;AAAA;;ACAA;ACCO,MAAM,yCAAc,kCAAkC;AAUtD,SAAS,yCAAO,CAAC,MAA6B,EAAE,OAAiC,EAAE,MAA+B,EAAE;IACzH,OAAO,MAAM,EAAE,KAAK,GAChB,MAAM,CAAC,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC,GACjF,OAAO,CAAC,KAAK,CAAC,CAAA;CACnB;;;ADZD,MAAM,qCAAe,GAAG,CAAC,GAA2B,EAAE,MAA6B,GAAG;IAAE,KAAK,EAAE,IAAI;CAAE,GAAK;IACxG,OAAO,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,GAAK;QAC/C,IAAI,MAAM;QACV,IAAI,OAAO,GAAG,KAAK,QAAQ;YACzB,IAAI,yCAAc,CAAC,IAAI,CAAC,GAAG,CAAC,EAC1B,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,AAAC,GAAG,CAAY,OAAO,CAAC,yCAAc,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAC;iBAE3E,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,EAAY,QAAQ,CAAC;eAG/C,MAAM,GAAG,GAAG;QAEd,IAAI,GAAG,YAAY,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,yCAAO,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;QACtE,OAAO,sCAAK,CAAC,MAAM,CAAC,CACjB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CACd,QAAQ,CAAC,CAAC,GAAG,GAAK;YACjB,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC;iBAClB,yCAAO,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;SACtC,CAAC,CAAA;KACL,CAAC,CAAA;CACH;IAED,wCAA8B,GAAf,qCAAe;;;;;ADnB9B,MAAM,0BAAI,GAAG,OAAO,CAAC,IAAI;AACzB,IAAI,CAAC,0BAAI,IAAI,0BAAI,CAAC,MAAM,KAAK,CAAC,EAC5B,MAAM,KAAK,CAAC,gGAAgG,CAAC,CAAA;AAG/G,MAAM,0BAAI,GAAG,qCAAI,CAAC,OAAO,CAAC,+BAAS,EAAE,0BAAI,CAAC,CAAC,CAAC,CAAC;AAC7C,IAAI,CAAC,mCAAE,CAAC,UAAU,CAAC,0BAAI,CAAC,EACtB,MAAM,KAAK,CAAC,CAAC,0DAA0D,EAAE,0BAAI,CAAC,EAAE,CAAC,CAAC,CAAA;AAGpF,MAAM,4BAAM,GAAG,mCAAE,CAAC,YAAY,CAAC,0BAAI,CAAC;AACpC,wCAAe,CAAC,4BAAM,EAAE;IAAE,KAAK,EAAE,KAAK;CAAE,CAAC,CAAC,IAAI,CAAC,CAAA,MAAM,GAAI;IACvD,IAAI,MAAM,EAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;SACxB,OAAO,CAAC,KAAK,CAAC,CAAC,uCAAuC,EAAE,0BAAI,CAAC,CAAC,CAAC,CAAC;CACtE,CAAC","sources":["src/cli.ts","src/validateInNode.ts","src/shared.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport Fs from 'fs'\nimport Path from 'path'\nimport ImageValidation from './validateInNode'\n\nconst args = process.argv\nif (!args || args.length !== 3) {\n  throw Error('IMAGE-VALIDATION: the CLI requires a single parameter which is a string path to an image file.')\n}\n\nconst path = Path.resolve(__dirname, args[2])\nif (!Fs.existsSync(path)) {\n  throw Error(`IMAGE-VALIDATION: the CLI did not find the image file at \"${path}\".`)\n}\n\nconst buffer = Fs.readFileSync(path)\nImageValidation(buffer, { throw: false }).then(result => {\n  if (result) { process.exit(0) }\n  else console.error(`IMAGE-VALIDATION: failed for image at \"${path}\"`)\n})","import sharp from 'sharp'\nimport { failure, ImageValidationConfig, ImageValidationNodeSrc, IMG_DATA_REGEX } from './shared'\n\nconst ImageValidation = (src: ImageValidationNodeSrc, config: ImageValidationConfig = { throw: true }) => {\n  return new Promise<boolean>((resolve, reject) => {\n    let source\n    if (typeof src === 'string') {\n      if (IMG_DATA_REGEX.test(src)) {\n        source = Buffer.from((src as string).replace(IMG_DATA_REGEX, ''), 'base64')\n      } else {\n        source = Buffer.from(src as string, 'base64')\n      }\n    } else {\n      source = src\n    }\n    if (src instanceof Buffer && !src[0]) failure(config, resolve, reject)\n    return sharp(source)\n      .resize(52, 52)\n      .toBuffer((err) => {\n        if (!err) resolve(true)\n        else failure(config, resolve, reject)\n      })\n  })\n}\n\nexport default ImageValidation","/** The regex to detect if base64 string contains browser specific data image instruction */\nexport const IMG_DATA_REGEX = /^data:image\\/\\w{2,5};base64,/i\n\nexport type ImageValidationDomSrc = string | File\n\nexport type ImageValidationNodeSrc = Buffer | Uint8Array | Uint8ClampedArray | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array | string\n\nexport interface ImageValidationConfig {\n  throw: boolean\n}\n\nexport function failure(config: ImageValidationConfig, resolve: (value: boolean) => void, reject: (reason: Error) => void) {\n  return config?.throw\n    ? reject(new Error('The media resource is either invalid, corrupt or not usable.'))\n    : resolve(false)\n}\n"],"names":[],"version":3,"file":"cli.js.map","sourceRoot":"../"}